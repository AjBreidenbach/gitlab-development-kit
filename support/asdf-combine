#!/usr/bin/env ruby

# frozen_string_literal: true

require 'uri'
require 'net/http'

require_relative '../lib/gdk'

GITLAB_PROJECT_BASE_URL = 'https://gitlab.com/gitlab-org/gitlab'

TOOL_VERSIONS_FILES = [
  { ref: -> { "v#{ref_from_remote_file('GITLAB_PAGES_VERSION')}" }, base_url: 'https://gitlab.com/gitlab-org/gitlab-pages' },
  { ref: -> { ref_from_remote_file('GITALY_SERVER_VERSION') }, base_url: 'https://gitlab.com/gitlab-org/gitaly' },
  { ref: -> { 'main' }, base_url: 'https://gitlab.com/gitlab-org/gitlab-ui' },
  { ref: -> { 'main' }, base_url: 'https://gitlab.com/gitlab-org/gitlab-docs' }
].freeze

HEADER_CONTENT = <<~CONTENT
  # support/asdf-combine generates this file from .tool-versions-gdk and the .tool-versions
  # files from GDK sub-projects.
  #
  # Do not modify this file directly.
CONTENT

def gdk_root
  @gdk_root ||= GDK::Config.new.gdk_root
end

def http_get(url)
  uri = URI.parse(url)
  response = Net::HTTP.get_response(uri)
  raise "Unable to get '#{url}'" unless response.class == Net::HTTPOK

  response.body
end

def read_tool_versions_from(content)
  content.lines.each_with_object({}) do |entry, object|
    next unless (match = entry.match(/^(?<software>\w+) (?<versions>.+)$/))

    object[match[:software]] = match[:versions].split
  end
end

def write_tool_versions_file(tool_versions_data)
  formatted_tool_versions_data = tool_versions_data.sort.map do |software, versions|
    "#{software} #{(versions).join(' ')}"
  end.join("\n")

  gdk_root.join('.tool-versions').write("#{HEADER_CONTENT}#{formatted_tool_versions_data}\n")
end

def ref_from_remote_file(file)
  url = "#{GITLAB_PROJECT_BASE_URL}/-/raw/master/#{file}"
  http_get(url).chomp
end

# ------------------------------------------------------------------------------

tool_versions_data = read_tool_versions_from(gdk_root.join('.tool-versions-gdk').read)

TOOL_VERSIONS_FILES.each do |entry|
  ref = entry[:ref].call
  url = "#{entry[:base_url]}/-/raw/#{ref}/.tool-versions"

  puts
  puts url
  puts '-' * url.length

  read_tool_versions_from(http_get(url)).each do |software, versions|
    puts "#{software} #{versions.join(' ')}"

    tool_versions_data[software] ||= []
    tool_versions_data[software] |= versions
  end
end

write_tool_versions_file(tool_versions_data)
